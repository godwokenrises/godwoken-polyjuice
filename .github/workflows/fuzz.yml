name: FuzzTest

on:
  push:
  pull_request:
  schedule:
    - cron:  '0 * * * *' # hourly

jobs:
  build-and-run-fuzzing:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Cache Rust - Cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
    - name: Install moleculec
      run: |
        export MOLC_VERSION=$(cat deps/godwoken-scripts/c/Makefile | egrep "MOLC_VERSION :=" | awk '{print $3}')
        test "$(moleculec --version)" = "Moleculec $MOLC_VERSION" \
        || CARGO_TARGET_DIR=target/ cargo install moleculec --version $MOLC_VERSION --force
    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v2
      with:
        path: ./llvm
        key: clang-11
    - name: Set the datetime
      run: echo "DATETIME=$(date +%F_%H:%M)" >> $GITHUB_ENV
    - name: Cache corpus
      id: cache-corpus
      uses: actions/cache@v2
      with:
        path: |
          polyjuice-tests/fuzz/corpus-cache
        key: corpus-${{ env.DATETIME }}
        restore-keys: |
          corpus

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "11.0"
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    - name: Set MAX_FUZZ_TIME for different branches
      run: |
        if [[ ${{ github.event_name == 'pull_request' }} ]]; then
          echo "MAX_FUZZ_TIME=60" >> $GITHUB_ENV
        elif [[ ${{ startsWith(github.base_ref, 'fuzz') }} ]]; then
          echo "MAX_FUZZ_TIME=3600" >> $GITHUB_ENV
        else
          echo "MAX_FUZZ_TIME=60" >> $GITHUB_ENV
        fi
        echo "trigger type: ${{ github.event.action }}"
        if [[ ${{ github.event_name }} == 'schedule' ]]; then
          echo "MAX_FUZZ_TIME=3600" >> $GITHUB_ENV
        fi
    - name: Fuzzing Polyjuice Generator 
      working-directory: polyjuice-tests/fuzz
      run: |
        mkdir -p corpus
        mkdir -p corpus-cache
        echo "num of corpus: $(ls corpus-cache | wc -l)"
        echo "fuzz time: ${{ env.MAX_FUZZ_TIME }}"
        make build/fuzzer && \
        LLVM_PROFILE_FILE="build/fuzzer.profraw" ./build/fuzzer corpus corpus-cache \
          -max_total_time=$MAX_FUZZ_TIME -timeout=120 \
          -max_len=25000 -rss_limit_mb=0
      # Max data buffer size: 24KB < 25000 bytes
    - name: Generate coverage report
      working-directory: polyjuice-tests/fuzz
      run: |
        llvm-profdata merge -sparse build/fuzzer.profraw -o build/fuzzer.profdata
        llvm-cov report ./build/fuzzer -instr-profile=build/fuzzer.profdata
        
    - name: merge corpus
      working-directory: polyjuice-tests/fuzz
      run: |
        mkdir -p corpus-new
        ./build/fuzzer -merge=1 corpus-new corpus-cache corpus
        rm -rf corpus-cache
        mv corpus-new corpus-cache

    - name: Archive inputs that triggered crashes or sanitizer failures
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: fuzzing-inputs
        path: |
          polyjuice-tests/fuzz/crash-*
          polyjuice-tests/fuzz/leak-*
          polyjuice-tests/fuzz/timeout-*
          polyjuice-tests/fuzz/oom-*
    - name: Archive corpus
      uses: actions/upload-artifact@v2
      with:
        name: corpus
        path: |
          polyjuice-tests/fuzz/corpus-cache/*
